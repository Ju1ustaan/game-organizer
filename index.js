require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

const adminIds = process.env.ADMIN_IDS.split(',').map(id => parseInt(id.trim())); // –º–∞—Å—Å–∏–≤ ID –∞–¥–º–∏–Ω–æ–≤
const groupChatId = parseInt(process.env.GROUP_CHANNEL_ID);

let waitingForMessage = false;
let broadcastMessage = '';
let participants = new Map(); // userId -> –∏–º—è
let groupMessageId = null;

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
function isAdmin(userId) {
    return adminIds.includes(userId);
}

// –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –∞–¥–º–∏–Ω–∞
bot.onText(/\/start/, (msg) => {
    if (isAdmin(msg.from.id)) {
        bot.sendMessage(msg.from.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìù –ù–æ–≤–∞—è –∏–≥—Ä–∞', callback_data: 'new_broadcast' }],
                    [{ text: 'üìã –£—á–∞—Å—Ç–Ω–∏–∫–∏', callback_data: 'show_participants' }],
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É', callback_data: 'cancel_game' }],
                    [{ text: '‚úÖ –ó–∞–ª –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω', callback_data: 'hall_reserved' }]
                ]
            }
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∞
bot.on('message', (msg) => {
    if (!isAdmin(msg.from.id) || msg.text.startsWith('/')) return;

    if (waitingForMessage) {
        broadcastMessage = msg.text;
        waitingForMessage = false;

        bot.sendMessage(msg.from.id, `–í—ã –≤–≤–µ–ª–∏:\n\n${broadcastMessage}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å?`, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üöÄ –°—Ç–∞—Ä—Ç', callback_data: 'start_broadcast' }]
                ]
            }
        });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (query) => {
    const userId = query.from.id;
    const fullName = `${query.from.first_name || ''} ${query.from.last_name || ''}`.trim();

    if (!query.data) return;

    if (query.data === 'new_broadcast') {
        if (groupMessageId !== null) {
            await bot.answerCallbackQuery(query.id, {
                text: '‚ö†Ô∏è –ò–≥—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â—É—é.',
                show_alert: true
            });
            return;
        }
    
        bot.sendMessage(userId, '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:');
        waitingForMessage = true;
        return;
    }

    // –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
    if (query.data === 'start_broadcast' && isAdmin(userId)) {
        participants.clear();
        const text = `${broadcastMessage}\n\nüìù –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n_–Ω–∏–∫—Ç–æ –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è_`;

        const sent = await bot.sendMessage(groupChatId, text, {
            parse_mode: 'Markdown',
            reply_markup: generateButtons()
        });

        groupMessageId = sent.message_id;

        try {
            await bot.sendMessage(userId, '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.');
        } catch (err) {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ${userId}: ${err.message}`);
        }
        return;
    }

    // –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (query.data === 'signup' && userId) {
        let actionText = '';
        if (participants.has(userId)) {
            actionText = '‚ùå –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã!';
        } else {
            participants.set(userId, fullName);
            actionText = '‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!';
        }

        await bot.answerCallbackQuery(query.id, { text: actionText });
        await updateParticipantMessage();
    }

    // –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
    if (query.data === 'cancel_signup' && userId) {
        let actionText = '';
        if (participants.has(userId)) {
            participants.delete(userId);
            actionText = '‚úÖ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å.';
        } else {
            actionText = '‚ùå –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã!';
        }

        await bot.answerCallbackQuery(query.id, { text: actionText });
        await updateParticipantMessage();
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if (query.data === 'confirm_self_payment') {
        if (!participants.has(userId)) {
            await bot.answerCallbackQuery(query.id, {
                text: '–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã.',
                show_alert: true
            });
            return;
        }

        let name = participants.get(userId);
        if (!name.includes('üí∞')) {
            name += ' üí∞';
            participants.set(userId, name);

            for (const adminId of adminIds) {
                try {
                    await bot.sendMessage(adminId, `üí∏ ${name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª(–∞) –æ–ø–ª–∞—Ç—É.`);
                } catch (err) {
                    console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ${adminId}: ${err.message}`);
                }
            }
        }

        await bot.answerCallbackQuery(query.id, { text: '‚úÖ –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!' });
        await updateParticipantMessage();
    }

    // –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞–¥–º–∏–Ω—É
    if (query.data === 'show_participants' && isAdmin(userId)) {
        const list = Array.from(participants.values());
        const participantText = list.length
            ? list.map((name, i) => `${i + 1}. ${name}`).join('\n')
            : '–ù–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è.';

        try {
            await bot.sendMessage(userId, `üìã –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n\n${participantText}`);
        } catch (err) {
            console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞–¥–º–∏–Ω—É ${userId}: ${err.message}`);
        }
    }

    // –û—Ç–º–µ–Ω–∞ –∏–≥—Ä—ã
    if (query.data === 'cancel_game' && isAdmin(userId)) {
    try {
        await bot.sendMessage(groupChatId, 'üö´ –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.');
        participants.clear();
        groupMessageId = null; // —Å–±—Ä–æ—Å
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∏–≥—Ä—ã:', err.message);
    }
}

    // –ó–∞–ª –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω
    if (query.data === 'hall_reserved' && isAdmin(userId)) {
        try {
            const list = Array.from(participants.entries()).map(([id, name], i) => `${i + 1}. ${name}`);
            const participantText = list.length ? list.join('\n') : '_–Ω–∏–∫—Ç–æ –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è_';
            const text = `*–ó–ê–õ –ó–ê–ë–†–û–ù–ò–†–û–í–ê–ù*\n\n${broadcastMessage}\n\nüìù –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n${participantText}`;

            const sent = await bot.sendMessage(groupChatId, text, {
                parse_mode: 'Markdown',
                reply_markup: generateButtons()
            });
            groupMessageId = sent.message_id;
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ª–µ:', err.message);
        }
    }
});

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function generateButtons() {
    return {
        inline_keyboard: [
            [{ text: '‚úÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'signup' }],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data: 'cancel_signup' }],
            [{ text: 'üí∞ –Ø –æ–ø–ª–∞—Ç–∏–ª', callback_data: 'confirm_self_payment' }]
        ]
    };
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
async function updateParticipantMessage() {
    try {
        const list = Array.from(participants.entries()).map(([id, name], index) => {
            return `${index + 1}. ${name}`;
        });

        const participantText = list.length ? list.join('\n') : '_–Ω–∏–∫—Ç–æ –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è_';
        const updatedMessage = `${broadcastMessage}\n\nüìù –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n${participantText}`;

        await bot.editMessageText(updatedMessage, {
            chat_id: groupChatId,
            message_id: groupMessageId,
            parse_mode: 'Markdown',
            reply_markup: generateButtons()
        });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err.message);
    }
}
